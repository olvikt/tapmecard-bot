import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("BOT_TOKEN"), parse_mode="MarkdownV2")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    choose_language = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands='start', state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer(
        "*üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ Flawless Card\!* \n"
        "–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —Å—Ç–∏–ª—å–Ω—É—é –≤–∏–∑–∏—Ç–∫—É –≤—Å–µ–≥–æ –∑–∞ *2 –º–∏–Ω—É—Ç—ã*\.\n\n"
        "*–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑–∏—Ç–∫–∏* –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 3 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞:\n"
        "1\\. –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–æ—Ç–æ\;\n"
        "2\\. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏\;\n"
        "3\\. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –±–∏–∑–Ω–µ—Å–µ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –∏–ª–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é\.\n\n"
        "üîó *–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä*: [fcard\.me/alex](https://fcard.me/alex)"
    )

    await Form.choose_language.set()
    await message.answer(
        "üåê *–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –≤–∏–∑–∏—Ç–∫–∏:*\n"
        "1\\. –†—É—Å—Å–∫–∏–π\n"
        "2\\. –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞\n"
        "3\\. English"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.message_handler(state=Form.choose_language)
async def process_language(message: types.Message, state: FSMContext):
    lang = message.text.strip().lower()

    if lang in ['1', '—Ä—É—Å—Å–∫–∏–π', 'ru']:
        await state.update_data(language='ru')
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ *–†—É—Å—Å–∫–∏–π —è–∑—ã–∫*\.", parse_mode="MarkdownV2")
    elif lang in ['2', '—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 'uk']:
        await state.update_data(language='uk')
        await message.answer("–í–∏ –æ–±—Ä–∞–ª–∏ *–£–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É*\.", parse_mode="MarkdownV2")
    elif lang in ['3', 'english', 'en']:
        await state.update_data(language='en')
        await message.answer("You selected *English* language\.", parse_mode="MarkdownV2")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –æ—Ç–ø—Ä–∞–≤–∏–≤ *1*, *2* –∏–ª–∏ *3*\.", parse_mode="MarkdownV2")
        return

    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∞–Ω–∫–µ—Ç—ã
    await message.answer("üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∫–∏... \(—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –±—É–¥–µ—Ç –ø–æ–∑–∂–µ\)")

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
