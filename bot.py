import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(level=logging.INFO)

bot = Bot(token=os.getenv("BOT_TOKEN"), parse_mode="MarkdownV2")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Form(StatesGroup):
    choose_language = State()

@dp.message_handler(commands='start', state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    # 1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    await bot.send_photo(
        message.chat.id,
        photo="https://fcard.me/static/fcard-preview.jpg",
        caption=(
            "*üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ Flawless Card\!* \n"
            "–°–æ–∑–¥–∞–π—Ç–µ –≤–∏–∑–∏—Ç–∫—É –∏ –¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏, —Å–æ—Ü—Å–µ—Ç—è–º–∏ –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–º–∏ –≤—Å–µ–≥–æ –∑–∞ *2 –º–∏–Ω—É—Ç—ã*\.\n\n"
            "‚úîÔ∏è –£–¥–æ–±–Ω–æ\n‚úîÔ∏è –ö—Ä–∞—Å–∏–≤–æ\n‚úîÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n"
            "üîó [–ü—Ä–∏–º–µ—Ä –≤–∏–∑–∏—Ç–∫–∏](https://fcard.me/alex)"
        )
    )

    # 2. –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_uk"),
        InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")
    )

    await message.answer("üåê *–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –≤–∏–∑–∏—Ç–∫–∏:*", reply_markup=keyboard)
    await Form.choose_language.set()

@dp.callback_query_handler(lambda c: c.data.startswith('lang_'), state=Form.choose_language)
async def process_language(callback_query: types.CallbackQuery, state: FSMContext):
    lang_code = callback_query.data.split('_')[1]
    lang_map = {'ru': '–†—É—Å—Å–∫–∏–π', 'uk': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 'en': 'English'}

    await state.update_data(language=lang_code)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ *{lang_map[lang_code]} —è–∑—ã–∫*\.",
        parse_mode="MarkdownV2"
    )

    await bot.send_message(callback_query.from_user.id, "üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∫–∏...")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
